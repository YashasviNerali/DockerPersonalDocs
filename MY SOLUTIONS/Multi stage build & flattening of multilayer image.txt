
-----------------------------------------------------------------------------------
$ cat Dockerfile 
ARG GOLANG_VER=1.8
FROM golang:${GOLANG_VER} as builder
WORKDIR /go/src/app
COPY . .
RUN go-wrapper download 
RUN go-wrapper install

FROM scratch
COPY --from=builder /go/bin/app /app
CMD ["/app"]
------------------------------------------------------------------
$ cat hello.go 
package main

import "fmt"

func main() {
        fmt.Printf("Hello, world.\n")
}
------------------------------------------------------
$ docker build -t test-multi-hello .                                                                                                                              
Sending build context to Docker daemon  4.096kB
Step 1/9 : ARG GOLANG_VER=1.8
 ---> 
Step 2/9 : FROM golang:${GOLANG_VER} as builder
 ---> a0c61f0b0796
Step 3/9 : WORKDIR /go/src/app
 ---> Using cache
 ---> af5177aae437
Step 4/9 : COPY . .
 ---> Using cache
 ---> 976490d44468
Step 5/9 : RUN go-wrapper download
 ---> Using cache
 ---> e31ac3ce83c3
Step 6/9 : RUN go-wrapper install
 ---> Using cache
 ---> 2630f482fe78
Step 7/9 : FROM scratch
 ---> 
Step 8/9 : COPY --from=builder /go/bin/app /app
 ---> Using cache
 ---> 5645db256412
Step 9/9 : CMD /app
 ---> Using cache
 ---> 8d428d6f7113
Successfully built 8d428d6f7113
Successfully tagged test-multi-hello:latest
------------------------------------------------------------------------
$ docker images | grep 2630f482fe78
<none>                <none>              2630f482fe78        6 days ago          700MB

$ docker images | grep 8d428d6f7113
test-multi-hello      latest              8d428d6f7113        6 days ago          1.56MB
-----------------------------------------------------------------------------------------------
$ docker run --rm test-multi-hello 
Hello, world.

------------------------------------------------------------------------------------

--------Flattening of multilayer images to a layer images

1 vi Dockerfile
FROM ubuntu:14.04
next step --
	docker build -t m2
	docker run --name m2cnt m2
o/p - docker image history m2
--5 layers
2  vi Dockerfile
FROM ubuntu:14.04 AS builder
FROM scratch
MAINTAINER YASHASVI
EXPOSE 80
#copy artifacts from from builder in current directory to home
COPY --from= builder .  /home  
CMD ["ubuntu","-g","daemon off"]


3. docker build -t m1 .
4 docker run --name m1cnt m1
5 docker export m1cnt > f1.tar
6 cat f1.tar | docker import  - newimage:latest
7 docker image history newimage 
o/p -- 1 layer 
 